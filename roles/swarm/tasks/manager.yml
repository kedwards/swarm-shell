---
# determine the status of each manager node and break them
# into two groups:
#   - swarm_manager_operational (swarm is running and active)
#   - swarm_manager_bootstrap (host needs to be joined to the cluster)
- name: determine swarm status
  shell: >
    docker info | egrep '^Swarm: ' | cut -d ' ' -f2
  register: swarm_status
  when: use_docker_info

- name: load docker info as facts (determine swarm status)
  docker_info_facts:
  when: not use_docker_info

- name: create swarm_manager_operational group
  add_host:
    hostname: "{{ item }}"
    groups: swarm_manager_operational
  with_items: "{{ groups['managers'] }}"
  when:
    - use_docker_info
    - item in groups['managers']
    - "'active' in swarm_status.stdout_lines"
  run_once: true

- name: create swarm_manager_operational group
  add_host:
    hostname: "{{ item }}"
    groups: swarm_manager_operational
  with_items: "{{ groups['managers'] }}"
  when:
    - not use_docker_info
    - hostvars[item]['docker_info']['Swarm']['LocalNodeState'] == 'active'
  run_once: true

- name: create swarm_manager_bootstrap group
  add_host:
    hostname: "{{ item }}"
    groups: swarm_manager_bootstrap
  with_items: "{{ groups['managers'] }}"
  when:
    - use_docker_info
    - "'active' not in swarm_status.stdout_lines"
  run_once: true

- name: create swarm_manager_bootstrap group
  add_host:
    hostname: "{{ item }}"
    groups: swarm_manager_bootstrap
  with_items: "{{ groups['managers'] }}"
  when:
    - not use_docker_info
    - hostvars[item]['docker_info']['Swarm']['LocalNodeState'] != 'active'
  run_once: true
